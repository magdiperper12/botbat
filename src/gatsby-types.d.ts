/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
  /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  STRAPI_Date: any;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  STRAPI_DateTime: any;
  /** A string used to identify an i18n locale */
  STRAPI_I18NLocaleCode: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  STRAPI_JSON: any;
  /** The `Upload` scalar type represents a file upload. */
  STRAPI_Upload: any;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type GraphQLSource = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fieldName: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly typeName: Maybe<Scalars['String']>;
};

type GraphQLSourceConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GraphQLSourceEdge>;
  readonly group: ReadonlyArray<GraphQLSourceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GraphQLSource>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GraphQLSourceConnection_distinctArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceConnection_groupArgs = {
  field: GraphQLSourceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GraphQLSourceConnection_maxArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceConnection_minArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceConnection_sumArgs = {
  field: GraphQLSourceFieldSelector;
};

type GraphQLSourceEdge = {
  readonly next: Maybe<GraphQLSource>;
  readonly node: GraphQLSource;
  readonly previous: Maybe<GraphQLSource>;
};

type GraphQLSourceFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fieldName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly typeName: InputMaybe<FieldSelectorEnum>;
};

type GraphQLSourceFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fieldName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly typeName: InputMaybe<StringQueryOperatorInput>;
};

type GraphQLSourceGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GraphQLSourceEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GraphQLSourceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GraphQLSource>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GraphQLSourceGroupConnection_distinctArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceGroupConnection_groupArgs = {
  field: GraphQLSourceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GraphQLSourceGroupConnection_maxArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceGroupConnection_minArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceGroupConnection_sumArgs = {
  field: GraphQLSourceFieldSelector;
};

type GraphQLSourceSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fieldName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly typeName: InputMaybe<SortOrderEnum>;
};

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allGraphQlSource: GraphQLSourceConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly graphQlSource: Maybe<GraphQLSource>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly strapi: STRAPI;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allGraphQlSourceArgs = {
  filter: InputMaybe<GraphQLSourceFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GraphQLSourceSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_graphQlSourceArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fieldName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  typeName: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flags: InputMaybe<SiteFlagsFilterInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI = {
  readonly blog: Maybe<STRAPI_BlogEntityResponse>;
  readonly blogs: Maybe<STRAPI_BlogEntityResponseCollection>;
  readonly features: Maybe<STRAPI_FeaturesEntityResponse>;
  readonly featuresHeadline: Maybe<STRAPI_FeaturesHeadlineEntityResponse>;
  readonly featuresHeadlines: Maybe<STRAPI_FeaturesHeadlineEntityResponseCollection>;
  readonly footer: Maybe<STRAPI_FooterEntityResponse>;
  readonly footerItem: Maybe<STRAPI_FooterItemEntityResponse>;
  readonly footerItems: Maybe<STRAPI_FooterItemEntityResponseCollection>;
  readonly hero: Maybe<STRAPI_HeroEntityResponse>;
  readonly heroes: Maybe<STRAPI_HeroEntityResponseCollection>;
  readonly home: Maybe<STRAPI_HomeEntityResponse>;
  readonly i18NLocale: Maybe<STRAPI_I18NLocaleEntityResponse>;
  readonly i18NLocales: Maybe<STRAPI_I18NLocaleEntityResponseCollection>;
  readonly me: Maybe<STRAPI_UsersPermissionsMe>;
  readonly menu: Maybe<STRAPI_MenuEntityResponse>;
  readonly menueItem: Maybe<STRAPI_MenueItemEntityResponse>;
  readonly menueItems: Maybe<STRAPI_MenueItemEntityResponseCollection>;
  readonly resFeatures: Maybe<STRAPI_FeaturesEntityResponseCollection>;
  readonly siteSettings: Maybe<STRAPI_SiteSettingsEntityResponse>;
  readonly uploadFile: Maybe<STRAPI_UploadFileEntityResponse>;
  readonly uploadFiles: Maybe<STRAPI_UploadFileEntityResponseCollection>;
  readonly uploadFolder: Maybe<STRAPI_UploadFolderEntityResponse>;
  readonly uploadFolders: Maybe<STRAPI_UploadFolderEntityResponseCollection>;
  readonly usersPermissionsRole: Maybe<STRAPI_UsersPermissionsRoleEntityResponse>;
  readonly usersPermissionsRoles: Maybe<STRAPI_UsersPermissionsRoleEntityResponseCollection>;
  readonly usersPermissionsUser: Maybe<STRAPI_UsersPermissionsUserEntityResponse>;
  readonly usersPermissionsUsers: Maybe<STRAPI_UsersPermissionsUserEntityResponseCollection>;
};


type STRAPI_blogArgs = {
  id: InputMaybe<Scalars['ID']>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
};


type STRAPI_blogsArgs = {
  filters: InputMaybe<STRAPI_BlogFiltersInput>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_featuresArgs = {
  id: InputMaybe<Scalars['ID']>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
};


type STRAPI_featuresHeadlineArgs = {
  id: InputMaybe<Scalars['ID']>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
};


type STRAPI_featuresHeadlinesArgs = {
  filters: InputMaybe<STRAPI_FeaturesHeadlineFiltersInput>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_footerArgs = {
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
};


type STRAPI_footerItemArgs = {
  id: InputMaybe<Scalars['ID']>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
};


type STRAPI_footerItemsArgs = {
  filters: InputMaybe<STRAPI_FooterItemFiltersInput>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_heroArgs = {
  id: InputMaybe<Scalars['ID']>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
};


type STRAPI_heroesArgs = {
  filters: InputMaybe<STRAPI_HeroFiltersInput>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_homeArgs = {
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
};


type STRAPI_i18NLocaleArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type STRAPI_i18NLocalesArgs = {
  filters: InputMaybe<STRAPI_I18NLocaleFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_menuArgs = {
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
};


type STRAPI_menueItemArgs = {
  id: InputMaybe<Scalars['ID']>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
};


type STRAPI_menueItemsArgs = {
  filters: InputMaybe<STRAPI_MenueItemFiltersInput>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_resFeaturesArgs = {
  filters: InputMaybe<STRAPI_FeaturesFiltersInput>;
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_siteSettingsArgs = {
  locale: InputMaybe<Scalars['STRAPI_I18NLocaleCode']>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
};


type STRAPI_uploadFileArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type STRAPI_uploadFilesArgs = {
  filters: InputMaybe<STRAPI_UploadFileFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_uploadFolderArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type STRAPI_uploadFoldersArgs = {
  filters: InputMaybe<STRAPI_UploadFolderFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_usersPermissionsRoleArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type STRAPI_usersPermissionsRolesArgs = {
  filters: InputMaybe<STRAPI_UsersPermissionsRoleFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_usersPermissionsUserArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type STRAPI_usersPermissionsUsersArgs = {
  filters: InputMaybe<STRAPI_UsersPermissionsUserFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_Blog = {
  readonly author: Maybe<Scalars['String']>;
  readonly content: Maybe<Scalars['STRAPI_JSON']>;
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_BlogRelationResponseCollection>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly publishedDate: Maybe<Scalars['STRAPI_Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly tags: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_Blog_localizationsArgs = {
  filters: InputMaybe<STRAPI_BlogFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_BlogEntity = {
  readonly attributes: Maybe<STRAPI_Blog>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_BlogEntityResponse = {
  readonly data: Maybe<STRAPI_BlogEntity>;
};

type STRAPI_BlogEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_BlogEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_BlogFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BlogFiltersInput>>>;
  readonly author: InputMaybe<STRAPI_StringFilterInput>;
  readonly content: InputMaybe<STRAPI_JSONFilterInput>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly locale: InputMaybe<STRAPI_StringFilterInput>;
  readonly localizations: InputMaybe<STRAPI_BlogFiltersInput>;
  readonly not: InputMaybe<STRAPI_BlogFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BlogFiltersInput>>>;
  readonly publishedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly publishedDate: InputMaybe<STRAPI_DateFilterInput>;
  readonly slug: InputMaybe<STRAPI_StringFilterInput>;
  readonly tags: InputMaybe<STRAPI_StringFilterInput>;
  readonly title: InputMaybe<STRAPI_StringFilterInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
};

type STRAPI_BlogInput = {
  readonly author: InputMaybe<Scalars['String']>;
  readonly content: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly publishedDate: InputMaybe<Scalars['STRAPI_Date']>;
  readonly slug: InputMaybe<Scalars['String']>;
  readonly tags: InputMaybe<Scalars['String']>;
  readonly title: InputMaybe<Scalars['String']>;
};

type STRAPI_BlogRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_BlogEntity>;
};

type STRAPI_BooleanFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly contains: InputMaybe<Scalars['Boolean']>;
  readonly containsi: InputMaybe<Scalars['Boolean']>;
  readonly endsWith: InputMaybe<Scalars['Boolean']>;
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly eqi: InputMaybe<Scalars['Boolean']>;
  readonly gt: InputMaybe<Scalars['Boolean']>;
  readonly gte: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly lt: InputMaybe<Scalars['Boolean']>;
  readonly lte: InputMaybe<Scalars['Boolean']>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nei: InputMaybe<Scalars['Boolean']>;
  readonly not: InputMaybe<STRAPI_BooleanFilterInput>;
  readonly notContains: InputMaybe<Scalars['Boolean']>;
  readonly notContainsi: InputMaybe<Scalars['Boolean']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly startsWith: InputMaybe<Scalars['Boolean']>;
};

type STRAPI_ComponentCallToActionsActions = {
  readonly buttonText: Maybe<Scalars['String']>;
  readonly buttonUrl: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
};

type STRAPI_ComponentCallToActionsActionsFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ComponentCallToActionsActionsFiltersInput>>>;
  readonly buttonText: InputMaybe<STRAPI_StringFilterInput>;
  readonly buttonUrl: InputMaybe<STRAPI_StringFilterInput>;
  readonly not: InputMaybe<STRAPI_ComponentCallToActionsActionsFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ComponentCallToActionsActionsFiltersInput>>>;
};

type STRAPI_ComponentCallToActionsActionsInput = {
  readonly buttonText: InputMaybe<Scalars['String']>;
  readonly buttonUrl: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
};

type STRAPI_ComponentCallToActionsCallToAction = {
  readonly id: Scalars['ID'];
};

type STRAPI_DateFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_Date']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_Date']>>>;
  readonly contains: InputMaybe<Scalars['STRAPI_Date']>;
  readonly containsi: InputMaybe<Scalars['STRAPI_Date']>;
  readonly endsWith: InputMaybe<Scalars['STRAPI_Date']>;
  readonly eq: InputMaybe<Scalars['STRAPI_Date']>;
  readonly eqi: InputMaybe<Scalars['STRAPI_Date']>;
  readonly gt: InputMaybe<Scalars['STRAPI_Date']>;
  readonly gte: InputMaybe<Scalars['STRAPI_Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_Date']>>>;
  readonly lt: InputMaybe<Scalars['STRAPI_Date']>;
  readonly lte: InputMaybe<Scalars['STRAPI_Date']>;
  readonly ne: InputMaybe<Scalars['STRAPI_Date']>;
  readonly nei: InputMaybe<Scalars['STRAPI_Date']>;
  readonly not: InputMaybe<STRAPI_DateFilterInput>;
  readonly notContains: InputMaybe<Scalars['STRAPI_Date']>;
  readonly notContainsi: InputMaybe<Scalars['STRAPI_Date']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_Date']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_Date']>>>;
  readonly startsWith: InputMaybe<Scalars['STRAPI_Date']>;
};

type STRAPI_DateTimeFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_DateTime']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_DateTime']>>>;
  readonly contains: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly containsi: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly endsWith: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly eq: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly eqi: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly gt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly gte: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_DateTime']>>>;
  readonly lt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly lte: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly ne: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly nei: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly not: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly notContains: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly notContainsi: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_DateTime']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_DateTime']>>>;
  readonly startsWith: InputMaybe<Scalars['STRAPI_DateTime']>;
};

type STRAPI_Features = {
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly dicription: Maybe<Scalars['STRAPI_JSON']>;
  readonly header: Scalars['String'];
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_FeaturesRelationResponseCollection>;
  readonly mediaUrl: Maybe<STRAPI_UploadFileRelationResponseCollection>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_Features_localizationsArgs = {
  filters: InputMaybe<STRAPI_FeaturesFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_Features_mediaUrlArgs = {
  filters: InputMaybe<STRAPI_UploadFileFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_FeaturesEntity = {
  readonly attributes: Maybe<STRAPI_Features>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_FeaturesEntityResponse = {
  readonly data: Maybe<STRAPI_FeaturesEntity>;
};

type STRAPI_FeaturesEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_FeaturesEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_FeaturesFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FeaturesFiltersInput>>>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly dicription: InputMaybe<STRAPI_JSONFilterInput>;
  readonly header: InputMaybe<STRAPI_StringFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly locale: InputMaybe<STRAPI_StringFilterInput>;
  readonly localizations: InputMaybe<STRAPI_FeaturesFiltersInput>;
  readonly not: InputMaybe<STRAPI_FeaturesFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FeaturesFiltersInput>>>;
  readonly publishedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly subtitle: InputMaybe<STRAPI_StringFilterInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
};

type STRAPI_FeaturesHeadline = {
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly description: Maybe<Scalars['STRAPI_JSON']>;
  readonly features: Maybe<STRAPI_FeaturesRelationResponseCollection>;
  readonly header: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_FeaturesHeadlineRelationResponseCollection>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly subTitle: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_FeaturesHeadline_featuresArgs = {
  filters: InputMaybe<STRAPI_FeaturesFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_FeaturesHeadline_localizationsArgs = {
  filters: InputMaybe<STRAPI_FeaturesHeadlineFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_FeaturesHeadlineEntity = {
  readonly attributes: Maybe<STRAPI_FeaturesHeadline>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_FeaturesHeadlineEntityResponse = {
  readonly data: Maybe<STRAPI_FeaturesHeadlineEntity>;
};

type STRAPI_FeaturesHeadlineEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_FeaturesHeadlineEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_FeaturesHeadlineFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FeaturesHeadlineFiltersInput>>>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly description: InputMaybe<STRAPI_JSONFilterInput>;
  readonly features: InputMaybe<STRAPI_FeaturesFiltersInput>;
  readonly header: InputMaybe<STRAPI_StringFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly locale: InputMaybe<STRAPI_StringFilterInput>;
  readonly localizations: InputMaybe<STRAPI_FeaturesHeadlineFiltersInput>;
  readonly not: InputMaybe<STRAPI_FeaturesHeadlineFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FeaturesHeadlineFiltersInput>>>;
  readonly publishedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly subTitle: InputMaybe<STRAPI_StringFilterInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
};

type STRAPI_FeaturesHeadlineInput = {
  readonly description: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly features: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly header: InputMaybe<Scalars['String']>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly subTitle: InputMaybe<Scalars['String']>;
};

type STRAPI_FeaturesHeadlineRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_FeaturesHeadlineEntity>;
};

type STRAPI_FeaturesInput = {
  readonly dicription: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly header: InputMaybe<Scalars['String']>;
  readonly mediaUrl: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly subtitle: InputMaybe<Scalars['String']>;
};

type STRAPI_FeaturesRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_FeaturesEntity>;
};

type STRAPI_FileInfoInput = {
  readonly alternativeText: InputMaybe<Scalars['String']>;
  readonly caption: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
};

type STRAPI_FloatFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly contains: InputMaybe<Scalars['Float']>;
  readonly containsi: InputMaybe<Scalars['Float']>;
  readonly endsWith: InputMaybe<Scalars['Float']>;
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly eqi: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nei: InputMaybe<Scalars['Float']>;
  readonly not: InputMaybe<STRAPI_FloatFilterInput>;
  readonly notContains: InputMaybe<Scalars['Float']>;
  readonly notContainsi: InputMaybe<Scalars['Float']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly startsWith: InputMaybe<Scalars['Float']>;
};

type STRAPI_Footer = {
  readonly copyrights: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly description: Maybe<Scalars['String']>;
  readonly description2: Maybe<Scalars['String']>;
  readonly footer_items: Maybe<STRAPI_FooterItemRelationResponseCollection>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_FooterRelationResponseCollection>;
  readonly logo: Maybe<STRAPI_UploadFileEntityResponse>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly social_facebook: Maybe<Scalars['String']>;
  readonly social_instagram: Maybe<Scalars['String']>;
  readonly social_linkedin: Maybe<Scalars['String']>;
  readonly social_whatsapp: Maybe<Scalars['String']>;
  readonly social_x: Maybe<Scalars['String']>;
  readonly social_youtube: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_Footer_footer_itemsArgs = {
  filters: InputMaybe<STRAPI_FooterItemFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_Footer_localizationsArgs = {
  publicationState?: InputMaybe<STRAPI_PublicationState>;
};

type STRAPI_FooterEntity = {
  readonly attributes: Maybe<STRAPI_Footer>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_FooterEntityResponse = {
  readonly data: Maybe<STRAPI_FooterEntity>;
};

type STRAPI_FooterInput = {
  readonly copyrights: InputMaybe<Scalars['String']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly description2: InputMaybe<Scalars['String']>;
  readonly footer_items: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly logo: InputMaybe<Scalars['ID']>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly social_facebook: InputMaybe<Scalars['String']>;
  readonly social_instagram: InputMaybe<Scalars['String']>;
  readonly social_linkedin: InputMaybe<Scalars['String']>;
  readonly social_whatsapp: InputMaybe<Scalars['String']>;
  readonly social_x: InputMaybe<Scalars['String']>;
  readonly social_youtube: InputMaybe<Scalars['String']>;
};

type STRAPI_FooterItem = {
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly group_name: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_FooterItemRelationResponseCollection>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly url: Maybe<Scalars['String']>;
};


type STRAPI_FooterItem_localizationsArgs = {
  filters: InputMaybe<STRAPI_FooterItemFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_FooterItemEntity = {
  readonly attributes: Maybe<STRAPI_FooterItem>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_FooterItemEntityResponse = {
  readonly data: Maybe<STRAPI_FooterItemEntity>;
};

type STRAPI_FooterItemEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_FooterItemEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_FooterItemFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FooterItemFiltersInput>>>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly group_name: InputMaybe<STRAPI_StringFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly locale: InputMaybe<STRAPI_StringFilterInput>;
  readonly localizations: InputMaybe<STRAPI_FooterItemFiltersInput>;
  readonly not: InputMaybe<STRAPI_FooterItemFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FooterItemFiltersInput>>>;
  readonly publishedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly title: InputMaybe<STRAPI_StringFilterInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly url: InputMaybe<STRAPI_StringFilterInput>;
};

type STRAPI_FooterItemInput = {
  readonly group_name: InputMaybe<Scalars['String']>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly url: InputMaybe<Scalars['String']>;
};

type STRAPI_FooterItemRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_FooterItemEntity>;
};

type STRAPI_FooterRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_FooterEntity>;
};

type STRAPI_GenericMorph = STRAPI_Blog | STRAPI_ComponentCallToActionsActions | STRAPI_ComponentCallToActionsCallToAction | STRAPI_Features | STRAPI_FeaturesHeadline | STRAPI_Footer | STRAPI_FooterItem | STRAPI_Hero | STRAPI_Home | STRAPI_I18NLocale | STRAPI_Menu | STRAPI_MenueItem | STRAPI_SiteSettings | STRAPI_UploadFile | STRAPI_UploadFolder | STRAPI_UsersPermissionsPermission | STRAPI_UsersPermissionsRole | STRAPI_UsersPermissionsUser;

type STRAPI_Hero = {
  readonly actions: Maybe<ReadonlyArray<Maybe<STRAPI_ComponentCallToActionsActions>>>;
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly description: Maybe<Scalars['STRAPI_JSON']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_HeroRelationResponseCollection>;
  readonly media: Maybe<STRAPI_UploadFileRelationResponseCollection>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_Hero_actionsArgs = {
  filters: InputMaybe<STRAPI_ComponentCallToActionsActionsFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_Hero_localizationsArgs = {
  filters: InputMaybe<STRAPI_HeroFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_Hero_mediaArgs = {
  filters: InputMaybe<STRAPI_UploadFileFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_HeroEntity = {
  readonly attributes: Maybe<STRAPI_Hero>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_HeroEntityResponse = {
  readonly data: Maybe<STRAPI_HeroEntity>;
};

type STRAPI_HeroEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_HeroEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_HeroFiltersInput = {
  readonly actions: InputMaybe<STRAPI_ComponentCallToActionsActionsFiltersInput>;
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_HeroFiltersInput>>>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly description: InputMaybe<STRAPI_JSONFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly locale: InputMaybe<STRAPI_StringFilterInput>;
  readonly localizations: InputMaybe<STRAPI_HeroFiltersInput>;
  readonly not: InputMaybe<STRAPI_HeroFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_HeroFiltersInput>>>;
  readonly publishedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly subtitle: InputMaybe<STRAPI_StringFilterInput>;
  readonly title: InputMaybe<STRAPI_StringFilterInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
};

type STRAPI_HeroInput = {
  readonly actions: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ComponentCallToActionsActionsInput>>>;
  readonly description: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly media: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly subtitle: InputMaybe<Scalars['String']>;
  readonly title: InputMaybe<Scalars['String']>;
};

type STRAPI_HeroRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_HeroEntity>;
};

type STRAPI_Home = {
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly introHero: Maybe<STRAPI_HeroEntityResponse>;
  readonly lastHero: Maybe<STRAPI_HeroEntityResponse>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_HomeRelationResponseCollection>;
  readonly name: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly sections: Maybe<STRAPI_FeaturesHeadlineRelationResponseCollection>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_Home_localizationsArgs = {
  publicationState?: InputMaybe<STRAPI_PublicationState>;
};


type STRAPI_Home_sectionsArgs = {
  filters: InputMaybe<STRAPI_FeaturesHeadlineFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_HomeEntity = {
  readonly attributes: Maybe<STRAPI_Home>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_HomeEntityResponse = {
  readonly data: Maybe<STRAPI_HomeEntity>;
};

type STRAPI_HomeInput = {
  readonly introHero: InputMaybe<Scalars['ID']>;
  readonly lastHero: InputMaybe<Scalars['ID']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly sections: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
};

type STRAPI_HomeRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_HomeEntity>;
};

type STRAPI_I18NLocale = {
  readonly code: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly name: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};

type STRAPI_I18NLocaleEntity = {
  readonly attributes: Maybe<STRAPI_I18NLocale>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_I18NLocaleEntityResponse = {
  readonly data: Maybe<STRAPI_I18NLocaleEntity>;
};

type STRAPI_I18NLocaleEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_I18NLocaleEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_I18NLocaleFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_I18NLocaleFiltersInput>>>;
  readonly code: InputMaybe<STRAPI_StringFilterInput>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly name: InputMaybe<STRAPI_StringFilterInput>;
  readonly not: InputMaybe<STRAPI_I18NLocaleFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_I18NLocaleFiltersInput>>>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
};

type STRAPI_IDFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly contains: InputMaybe<Scalars['ID']>;
  readonly containsi: InputMaybe<Scalars['ID']>;
  readonly endsWith: InputMaybe<Scalars['ID']>;
  readonly eq: InputMaybe<Scalars['ID']>;
  readonly eqi: InputMaybe<Scalars['ID']>;
  readonly gt: InputMaybe<Scalars['ID']>;
  readonly gte: InputMaybe<Scalars['ID']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly lt: InputMaybe<Scalars['ID']>;
  readonly lte: InputMaybe<Scalars['ID']>;
  readonly ne: InputMaybe<Scalars['ID']>;
  readonly nei: InputMaybe<Scalars['ID']>;
  readonly not: InputMaybe<STRAPI_IDFilterInput>;
  readonly notContains: InputMaybe<Scalars['ID']>;
  readonly notContainsi: InputMaybe<Scalars['ID']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly startsWith: InputMaybe<Scalars['ID']>;
};

type STRAPI_IntFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly contains: InputMaybe<Scalars['Int']>;
  readonly containsi: InputMaybe<Scalars['Int']>;
  readonly endsWith: InputMaybe<Scalars['Int']>;
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly eqi: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nei: InputMaybe<Scalars['Int']>;
  readonly not: InputMaybe<STRAPI_IntFilterInput>;
  readonly notContains: InputMaybe<Scalars['Int']>;
  readonly notContainsi: InputMaybe<Scalars['Int']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly startsWith: InputMaybe<Scalars['Int']>;
};

type STRAPI_JSONFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_JSON']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_JSON']>>>;
  readonly contains: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly containsi: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly endsWith: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly eq: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly eqi: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly gt: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly gte: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_JSON']>>>;
  readonly lt: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly lte: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly ne: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly nei: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly not: InputMaybe<STRAPI_JSONFilterInput>;
  readonly notContains: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly notContainsi: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_JSON']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['STRAPI_JSON']>>>;
  readonly startsWith: InputMaybe<Scalars['STRAPI_JSON']>;
};

type STRAPI_Menu = {
  readonly actions: Maybe<ReadonlyArray<Maybe<STRAPI_ComponentCallToActionsActions>>>;
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_MenuRelationResponseCollection>;
  readonly logo: Maybe<STRAPI_UploadFileEntityResponse>;
  readonly menue_items: Maybe<STRAPI_MenueItemRelationResponseCollection>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly sitename: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_Menu_actionsArgs = {
  filters: InputMaybe<STRAPI_ComponentCallToActionsActionsFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_Menu_localizationsArgs = {
  publicationState?: InputMaybe<STRAPI_PublicationState>;
};


type STRAPI_Menu_menue_itemsArgs = {
  filters: InputMaybe<STRAPI_MenueItemFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_MenuEntity = {
  readonly attributes: Maybe<STRAPI_Menu>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_MenuEntityResponse = {
  readonly data: Maybe<STRAPI_MenuEntity>;
};

type STRAPI_MenuInput = {
  readonly actions: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ComponentCallToActionsActionsInput>>>;
  readonly logo: InputMaybe<Scalars['ID']>;
  readonly menue_items: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly sitename: InputMaybe<Scalars['String']>;
};

type STRAPI_MenuRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_MenuEntity>;
};

type STRAPI_MenueItem = {
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_MenueItemRelationResponseCollection>;
  readonly name: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly route: Maybe<Scalars['String']>;
  readonly sub_menue_items: Maybe<STRAPI_MenueItemRelationResponseCollection>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_MenueItem_localizationsArgs = {
  filters: InputMaybe<STRAPI_MenueItemFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_MenueItem_sub_menue_itemsArgs = {
  filters: InputMaybe<STRAPI_MenueItemFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  publicationState?: InputMaybe<STRAPI_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_MenueItemEntity = {
  readonly attributes: Maybe<STRAPI_MenueItem>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_MenueItemEntityResponse = {
  readonly data: Maybe<STRAPI_MenueItemEntity>;
};

type STRAPI_MenueItemEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_MenueItemEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_MenueItemFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_MenueItemFiltersInput>>>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly locale: InputMaybe<STRAPI_StringFilterInput>;
  readonly localizations: InputMaybe<STRAPI_MenueItemFiltersInput>;
  readonly name: InputMaybe<STRAPI_StringFilterInput>;
  readonly not: InputMaybe<STRAPI_MenueItemFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_MenueItemFiltersInput>>>;
  readonly publishedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly route: InputMaybe<STRAPI_StringFilterInput>;
  readonly sub_menue_items: InputMaybe<STRAPI_MenueItemFiltersInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
};

type STRAPI_MenueItemInput = {
  readonly name: InputMaybe<Scalars['String']>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly route: InputMaybe<Scalars['String']>;
  readonly sub_menue_items: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
};

type STRAPI_MenueItemRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_MenueItemEntity>;
};

type STRAPI_Pagination = {
  readonly page: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly pageSize: Scalars['Int'];
  readonly total: Scalars['Int'];
};

type STRAPI_PaginationArg = {
  readonly limit: InputMaybe<Scalars['Int']>;
  readonly page: InputMaybe<Scalars['Int']>;
  readonly pageSize: InputMaybe<Scalars['Int']>;
  readonly start: InputMaybe<Scalars['Int']>;
};

type STRAPI_PublicationState =
  | 'LIVE'
  | 'PREVIEW';

type STRAPI_ResponseCollectionMeta = {
  readonly pagination: STRAPI_Pagination;
};

type STRAPI_SiteSettings = {
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_SiteSettingsRelationResponseCollection>;
  readonly logo: Maybe<STRAPI_UploadFileEntityResponse>;
  readonly name: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly slogan: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_SiteSettings_localizationsArgs = {
  publicationState?: InputMaybe<STRAPI_PublicationState>;
};

type STRAPI_SiteSettingsEntity = {
  readonly attributes: Maybe<STRAPI_SiteSettings>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_SiteSettingsEntityResponse = {
  readonly data: Maybe<STRAPI_SiteSettingsEntity>;
};

type STRAPI_SiteSettingsInput = {
  readonly logo: InputMaybe<Scalars['ID']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly publishedAt: InputMaybe<Scalars['STRAPI_DateTime']>;
  readonly slogan: InputMaybe<Scalars['String']>;
};

type STRAPI_SiteSettingsRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_SiteSettingsEntity>;
};

type STRAPI_StringFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly contains: InputMaybe<Scalars['String']>;
  readonly containsi: InputMaybe<Scalars['String']>;
  readonly endsWith: InputMaybe<Scalars['String']>;
  readonly eq: InputMaybe<Scalars['String']>;
  readonly eqi: InputMaybe<Scalars['String']>;
  readonly gt: InputMaybe<Scalars['String']>;
  readonly gte: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly lt: InputMaybe<Scalars['String']>;
  readonly lte: InputMaybe<Scalars['String']>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nei: InputMaybe<Scalars['String']>;
  readonly not: InputMaybe<STRAPI_StringFilterInput>;
  readonly notContains: InputMaybe<Scalars['String']>;
  readonly notContainsi: InputMaybe<Scalars['String']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly startsWith: InputMaybe<Scalars['String']>;
};

type STRAPI_UploadFile = {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly caption: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<Scalars['STRAPI_JSON']>;
  readonly hash: Scalars['String'];
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Scalars['String'];
  readonly name: Scalars['String'];
  readonly previewUrl: Maybe<Scalars['String']>;
  readonly provider: Scalars['String'];
  readonly provider_metadata: Maybe<Scalars['STRAPI_JSON']>;
  readonly related: Maybe<ReadonlyArray<Maybe<STRAPI_GenericMorph>>>;
  readonly size: Scalars['Float'];
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly url: Scalars['String'];
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI_UploadFileEntity = {
  readonly attributes: Maybe<STRAPI_UploadFile>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_UploadFileEntityResponse = {
  readonly data: Maybe<STRAPI_UploadFileEntity>;
};

type STRAPI_UploadFileEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_UploadFileEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_UploadFileFiltersInput = {
  readonly alternativeText: InputMaybe<STRAPI_StringFilterInput>;
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UploadFileFiltersInput>>>;
  readonly caption: InputMaybe<STRAPI_StringFilterInput>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly ext: InputMaybe<STRAPI_StringFilterInput>;
  readonly folder: InputMaybe<STRAPI_UploadFolderFiltersInput>;
  readonly folderPath: InputMaybe<STRAPI_StringFilterInput>;
  readonly formats: InputMaybe<STRAPI_JSONFilterInput>;
  readonly hash: InputMaybe<STRAPI_StringFilterInput>;
  readonly height: InputMaybe<STRAPI_IntFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly mime: InputMaybe<STRAPI_StringFilterInput>;
  readonly name: InputMaybe<STRAPI_StringFilterInput>;
  readonly not: InputMaybe<STRAPI_UploadFileFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UploadFileFiltersInput>>>;
  readonly previewUrl: InputMaybe<STRAPI_StringFilterInput>;
  readonly provider: InputMaybe<STRAPI_StringFilterInput>;
  readonly provider_metadata: InputMaybe<STRAPI_JSONFilterInput>;
  readonly size: InputMaybe<STRAPI_FloatFilterInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly url: InputMaybe<STRAPI_StringFilterInput>;
  readonly width: InputMaybe<STRAPI_IntFilterInput>;
};

type STRAPI_UploadFileInput = {
  readonly alternativeText: InputMaybe<Scalars['String']>;
  readonly caption: InputMaybe<Scalars['String']>;
  readonly ext: InputMaybe<Scalars['String']>;
  readonly folder: InputMaybe<Scalars['ID']>;
  readonly folderPath: InputMaybe<Scalars['String']>;
  readonly formats: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly hash: InputMaybe<Scalars['String']>;
  readonly height: InputMaybe<Scalars['Int']>;
  readonly mime: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly previewUrl: InputMaybe<Scalars['String']>;
  readonly provider: InputMaybe<Scalars['String']>;
  readonly provider_metadata: InputMaybe<Scalars['STRAPI_JSON']>;
  readonly size: InputMaybe<Scalars['Float']>;
  readonly url: InputMaybe<Scalars['String']>;
  readonly width: InputMaybe<Scalars['Int']>;
};

type STRAPI_UploadFileRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_UploadFileEntity>;
};

type STRAPI_UploadFolder = {
  readonly children: Maybe<STRAPI_UploadFolderRelationResponseCollection>;
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly files: Maybe<STRAPI_UploadFileRelationResponseCollection>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<STRAPI_UploadFolderEntityResponse>;
  readonly path: Scalars['String'];
  readonly pathId: Scalars['Int'];
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};


type STRAPI_UploadFolder_childrenArgs = {
  filters: InputMaybe<STRAPI_UploadFolderFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_UploadFolder_filesArgs = {
  filters: InputMaybe<STRAPI_UploadFileFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_UploadFolderEntity = {
  readonly attributes: Maybe<STRAPI_UploadFolder>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_UploadFolderEntityResponse = {
  readonly data: Maybe<STRAPI_UploadFolderEntity>;
};

type STRAPI_UploadFolderEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_UploadFolderEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_UploadFolderFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UploadFolderFiltersInput>>>;
  readonly children: InputMaybe<STRAPI_UploadFolderFiltersInput>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly files: InputMaybe<STRAPI_UploadFileFiltersInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly name: InputMaybe<STRAPI_StringFilterInput>;
  readonly not: InputMaybe<STRAPI_UploadFolderFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UploadFolderFiltersInput>>>;
  readonly parent: InputMaybe<STRAPI_UploadFolderFiltersInput>;
  readonly path: InputMaybe<STRAPI_StringFilterInput>;
  readonly pathId: InputMaybe<STRAPI_IntFilterInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
};

type STRAPI_UploadFolderInput = {
  readonly children: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly files: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly parent: InputMaybe<Scalars['ID']>;
  readonly path: InputMaybe<Scalars['String']>;
  readonly pathId: InputMaybe<Scalars['Int']>;
};

type STRAPI_UploadFolderRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_UploadFolderEntity>;
};

type STRAPI_UsersPermissionsCreateRolePayload = {
  readonly ok: Scalars['Boolean'];
};

type STRAPI_UsersPermissionsDeleteRolePayload = {
  readonly ok: Scalars['Boolean'];
};

type STRAPI_UsersPermissionsLoginInput = {
  readonly identifier: Scalars['String'];
  readonly password: Scalars['String'];
  readonly provider: Scalars['String'];
};

type STRAPI_UsersPermissionsLoginPayload = {
  readonly jwt: Maybe<Scalars['String']>;
  readonly user: STRAPI_UsersPermissionsMe;
};

type STRAPI_UsersPermissionsMe = {
  readonly blocked: Maybe<Scalars['Boolean']>;
  readonly confirmed: Maybe<Scalars['Boolean']>;
  readonly email: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly role: Maybe<STRAPI_UsersPermissionsMeRole>;
  readonly username: Scalars['String'];
};

type STRAPI_UsersPermissionsMeRole = {
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly type: Maybe<Scalars['String']>;
};

type STRAPI_UsersPermissionsPasswordPayload = {
  readonly ok: Scalars['Boolean'];
};

type STRAPI_UsersPermissionsPermission = {
  readonly action: Scalars['String'];
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly role: Maybe<STRAPI_UsersPermissionsRoleEntityResponse>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
};

type STRAPI_UsersPermissionsPermissionEntity = {
  readonly attributes: Maybe<STRAPI_UsersPermissionsPermission>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_UsersPermissionsPermissionFiltersInput = {
  readonly action: InputMaybe<STRAPI_StringFilterInput>;
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UsersPermissionsPermissionFiltersInput>>>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly not: InputMaybe<STRAPI_UsersPermissionsPermissionFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UsersPermissionsPermissionFiltersInput>>>;
  readonly role: InputMaybe<STRAPI_UsersPermissionsRoleFiltersInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
};

type STRAPI_UsersPermissionsPermissionRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_UsersPermissionsPermissionEntity>;
};

type STRAPI_UsersPermissionsRegisterInput = {
  readonly email: Scalars['String'];
  readonly password: Scalars['String'];
  readonly username: Scalars['String'];
};

type STRAPI_UsersPermissionsRole = {
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly description: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly permissions: Maybe<STRAPI_UsersPermissionsPermissionRelationResponseCollection>;
  readonly type: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly users: Maybe<STRAPI_UsersPermissionsUserRelationResponseCollection>;
};


type STRAPI_UsersPermissionsRole_permissionsArgs = {
  filters: InputMaybe<STRAPI_UsersPermissionsPermissionFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type STRAPI_UsersPermissionsRole_usersArgs = {
  filters: InputMaybe<STRAPI_UsersPermissionsUserFiltersInput>;
  pagination?: InputMaybe<STRAPI_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type STRAPI_UsersPermissionsRoleEntity = {
  readonly attributes: Maybe<STRAPI_UsersPermissionsRole>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_UsersPermissionsRoleEntityResponse = {
  readonly data: Maybe<STRAPI_UsersPermissionsRoleEntity>;
};

type STRAPI_UsersPermissionsRoleEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_UsersPermissionsRoleEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_UsersPermissionsRoleFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UsersPermissionsRoleFiltersInput>>>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly description: InputMaybe<STRAPI_StringFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly name: InputMaybe<STRAPI_StringFilterInput>;
  readonly not: InputMaybe<STRAPI_UsersPermissionsRoleFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UsersPermissionsRoleFiltersInput>>>;
  readonly permissions: InputMaybe<STRAPI_UsersPermissionsPermissionFiltersInput>;
  readonly type: InputMaybe<STRAPI_StringFilterInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly users: InputMaybe<STRAPI_UsersPermissionsUserFiltersInput>;
};

type STRAPI_UsersPermissionsRoleInput = {
  readonly description: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly permissions: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly users: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
};

type STRAPI_UsersPermissionsUpdateRolePayload = {
  readonly ok: Scalars['Boolean'];
};

type STRAPI_UsersPermissionsUser = {
  readonly blocked: Maybe<Scalars['Boolean']>;
  readonly confirmed: Maybe<Scalars['Boolean']>;
  readonly createdAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly email: Scalars['String'];
  readonly provider: Maybe<Scalars['String']>;
  readonly role: Maybe<STRAPI_UsersPermissionsRoleEntityResponse>;
  readonly updatedAt: Maybe<Scalars['STRAPI_DateTime']>;
  readonly username: Scalars['String'];
};

type STRAPI_UsersPermissionsUserEntity = {
  readonly attributes: Maybe<STRAPI_UsersPermissionsUser>;
  readonly id: Maybe<Scalars['ID']>;
};

type STRAPI_UsersPermissionsUserEntityResponse = {
  readonly data: Maybe<STRAPI_UsersPermissionsUserEntity>;
};

type STRAPI_UsersPermissionsUserEntityResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_UsersPermissionsUserEntity>;
  readonly meta: STRAPI_ResponseCollectionMeta;
};

type STRAPI_UsersPermissionsUserFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UsersPermissionsUserFiltersInput>>>;
  readonly blocked: InputMaybe<STRAPI_BooleanFilterInput>;
  readonly confirmationToken: InputMaybe<STRAPI_StringFilterInput>;
  readonly confirmed: InputMaybe<STRAPI_BooleanFilterInput>;
  readonly createdAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly email: InputMaybe<STRAPI_StringFilterInput>;
  readonly id: InputMaybe<STRAPI_IDFilterInput>;
  readonly not: InputMaybe<STRAPI_UsersPermissionsUserFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_UsersPermissionsUserFiltersInput>>>;
  readonly password: InputMaybe<STRAPI_StringFilterInput>;
  readonly provider: InputMaybe<STRAPI_StringFilterInput>;
  readonly resetPasswordToken: InputMaybe<STRAPI_StringFilterInput>;
  readonly role: InputMaybe<STRAPI_UsersPermissionsRoleFiltersInput>;
  readonly updatedAt: InputMaybe<STRAPI_DateTimeFilterInput>;
  readonly username: InputMaybe<STRAPI_StringFilterInput>;
};

type STRAPI_UsersPermissionsUserInput = {
  readonly blocked: InputMaybe<Scalars['Boolean']>;
  readonly confirmationToken: InputMaybe<Scalars['String']>;
  readonly confirmed: InputMaybe<Scalars['Boolean']>;
  readonly email: InputMaybe<Scalars['String']>;
  readonly password: InputMaybe<Scalars['String']>;
  readonly provider: InputMaybe<Scalars['String']>;
  readonly resetPasswordToken: InputMaybe<Scalars['String']>;
  readonly role: InputMaybe<Scalars['ID']>;
  readonly username: InputMaybe<Scalars['String']>;
};

type STRAPI_UsersPermissionsUserRelationResponseCollection = {
  readonly data: ReadonlyArray<STRAPI_UsersPermissionsUserEntity>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flags: Maybe<SiteFlags>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly flags: InputMaybe<SiteFlagsFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flags: InputMaybe<SiteFlagsFilterInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFlags = {
  readonly FAST_REFRESH: Maybe<Scalars['Boolean']>;
};

type SiteFlagsFieldSelector = {
  readonly FAST_REFRESH: InputMaybe<FieldSelectorEnum>;
};

type SiteFlagsFilterInput = {
  readonly FAST_REFRESH: InputMaybe<BooleanQueryOperatorInput>;
};

type SiteFlagsSortInput = {
  readonly FAST_REFRESH: InputMaybe<SortOrderEnum>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly flags: InputMaybe<SiteFlagsSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type carasoulQueryQueryVariables = Exact<{ [key: string]: never; }>;


type carasoulQueryQuery = { readonly strapi: { readonly home: { readonly data: { readonly id: string | null, readonly attributes: { readonly introHero: { readonly data: { readonly id: string | null, readonly attributes: { readonly description: any | null, readonly subtitle: string | null, readonly title: string | null, readonly actions: ReadonlyArray<{ readonly buttonText: string | null, readonly buttonUrl: string | null, readonly id: string } | null> | null } | null } | null } | null } | null } | null } | null } };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type MyaaueryQueryVariables = Exact<{ [key: string]: never; }>;


type MyaaueryQuery = { readonly strapi: { readonly home: { readonly data: { readonly id: string | null, readonly attributes: { readonly sections: { readonly data: ReadonlyArray<{ readonly id: string | null, readonly attributes: { readonly header: string | null, readonly description: any | null, readonly subTitle: string | null, readonly features: { readonly data: ReadonlyArray<{ readonly id: string | null, readonly attributes: { readonly header: string, readonly subtitle: string | null, readonly dicription: any | null, readonly mediaUrl: { readonly data: ReadonlyArray<{ readonly id: string | null, readonly attributes: { readonly url: string } | null }> } | null } | null }> } | null } | null }> } | null } | null } | null } | null } };

type MyQueryQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryQuery = { readonly strapi: { readonly home: { readonly data: { readonly id: string | null, readonly attributes: { readonly sections: { readonly data: ReadonlyArray<{ readonly id: string | null, readonly attributes: { readonly description: any | null, readonly header: string | null, readonly subTitle: string | null } | null }> } | null } | null } | null } | null } };


}
